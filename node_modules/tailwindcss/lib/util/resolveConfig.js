"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveConfig;

var _mergeWith = _interopRequireDefault(require("lodash/mergeWith"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _defaults = _interopRequireDefault(require("lodash/defaults"));

var _map = _interopRequireDefault(require("lodash/map"));

var _get = _interopRequireDefault(require("lodash/get"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function value(valueToResolve, ...args) {
  return (0, _isFunction.default)(valueToResolve) ? valueToResolve(...args) : valueToResolve;
}

function mergeExtensions({
  extend,
  ...theme
}) {
  return (0, _mergeWith.default)(theme, extend, (themeValue, extensions) => {
    if (!(0, _isFunction.default)(themeValue) && !(0, _isFunction.default)(extensions)) {
      return { ...themeValue,
        ...extensions
      };
    }

    return resolveThemePath => ({ ...value(themeValue, resolveThemePath),
      ...value(extensions, resolveThemePath)
    });
  });
}

function resolveFunctionKeys(object) {
  const resolveObjectPath = (key, defaultValue) => {
    const val = (0, _get.default)(object, key, defaultValue);
    return (0, _isFunction.default)(val) ? val(resolveObjectPath) : val;
  };

  return Object.keys(object).reduce((resolved, key) => {
    return { ...resolved,
      [key]: (0, _isFunction.default)(object[key]) ? object[key](resolveObjectPath) : object[key]
    };
  }, {});
}

function resolveConfig(configs) {
  return (0, _defaults.default)({
    theme: resolveFunctionKeys(mergeExtensions((0, _defaults.default)({}, ...(0, _map.default)(configs, 'theme')))),
    variants: (0, _defaults.default)({}, ...(0, _map.default)(configs, 'variants'))
  }, ...configs);
}